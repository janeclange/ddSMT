(set-option :produce-unsat-cores true)
(declare-fun _substvar_7_ () Int)
(declare-fun _substvar_149_ () Int)
(declare-fun _substvar_6_ () Int)
(declare-fun _substvar_98_ () Int)
(declare-fun _substvar_9_ () Int)
(declare-fun _substvar_38_ () Int)
(define-fun __node_trans_DRAGON_0 ((DRAGON.usr.e01@1 Bool) (DRAGON.usr.e02@1 Bool) (DRAGON.usr.e03@1 Bool) (DRAGON.usr.e04@1 Bool) (DRAGON.usr.e05@1 Bool) (DRAGON.usr.e06@1 Bool) (DRAGON.usr.e07@1 Bool) (DRAGON.usr.e08@1 Bool) (DRAGON.usr.e09@1 Bool) (DRAGON.usr.e10@1 Bool) (DRAGON.usr.e11@1 Bool) (DRAGON.usr.e12@1 Bool) (DRAGON.usr.init_invalid@1 Int) (DRAGON.res.nondet_30 Int) (DRAGON.res.nondet_29 Int) (DRAGON.res.nondet_28 Int) (DRAGON.res.nondet_27 Int) (DRAGON.res.nondet_26 Int) (DRAGON.res.nondet_25 Int) (DRAGON.res.nondet_24 Int) (DRAGON.res.nondet_23 Int) (DRAGON.res.nondet_22 Int) (DRAGON.res.nondet_21 Int) (DRAGON.res.nondet_20 Int) (DRAGON.res.nondet_19 Int) (DRAGON.res.nondet_18 Int) (DRAGON.res.nondet_17 Int) (DRAGON.res.nondet_16 Int) (DRAGON.res.nondet_15 Int) (DRAGON.res.nondet_14 Int) (DRAGON.res.nondet_13 Int) (DRAGON.res.nondet_12 Int) (DRAGON.res.nondet_11 Int) (DRAGON.res.nondet_10 Int) (DRAGON.res.nondet_9 Int) (DRAGON.res.nondet_8 Int) (DRAGON.res.nondet_7 Int) (DRAGON.res.nondet_6 Int) (DRAGON.res.nondet_5 Int) (DRAGON.res.nondet_4 Int) (DRAGON.res.nondet_3 Int) (DRAGON.res.nondet_2 Int) (DRAGON.res.nondet_1 Int) (DRAGON.res.nondet_0 Int) (DRAGON.usr.exclusive@1 Int) (DRAGON.usr.shared@1 Int) (DRAGON.usr.shared_dirty@1 Int) (DRAGON.usr.dirty@1 Int) (DRAGON.usr.invalid@1 Int) (DRAGON.usr.erreur@1 Bool) (DRAGON.res.init_flag@1 Bool) (DRAGON.impl.usr.mem_init@1 Int) (DRAGON.usr.e01@0 Bool) (DRAGON.usr.e02@0 Bool) (DRAGON.usr.e03@0 Bool) (DRAGON.usr.e04@0 Bool) (DRAGON.usr.e05@0 Bool) (DRAGON.usr.e06@0 Bool) (DRAGON.usr.e07@0 Bool) (DRAGON.usr.e08@0 Bool) (DRAGON.usr.e09@0 Bool) (DRAGON.usr.e10@0 Bool) (DRAGON.usr.e11@0 Bool) (DRAGON.usr.e12@0 Bool) (DRAGON.usr.init_invalid@0 Int) (DRAGON.usr.exclusive@0 Int) (DRAGON.usr.shared@0 Int) (DRAGON.usr.shared_dirty@0 Int) (DRAGON.usr.dirty@0 Int) (DRAGON.usr.invalid@0 Int) (DRAGON.usr.erreur@0 Bool) (DRAGON.res.init_flag@0 Bool) (DRAGON.impl.usr.mem_init@0 Int)) Bool (let ((X4 (>= _substvar_149_ 1))) (let ((X5 (= _substvar_38_ 0))) (and (= DRAGON.usr.exclusive@1 (ite X5 _substvar_98_ 0)) (= DRAGON.usr.shared@1 0) true (= DRAGON.usr.dirty@1 (ite DRAGON.usr.e02@1 (ite X4 0 _substvar_38_) _substvar_38_)) true true true true))))
(declare-fun f93@1 () Bool)
(assert (let ((X2 _substvar_7_)) (__node_trans_DRAGON_0 true f93@1 false false false false false false false false false false 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 _substvar_6_ _substvar_7_ 0 _substvar_9_ 0 false false 0 false false false false false false false false false false false false 0 0 0 0 0 0 false false 0)))
(assert (not (or false false false false false false false false (= _substvar_9_ 0) false false false false false false false (not (= (+ _substvar_6_ _substvar_7_ 1) 0)))))
(push 1)
(check-sat)
(pop 1)
(check-sat)
(get-unsat-core)

