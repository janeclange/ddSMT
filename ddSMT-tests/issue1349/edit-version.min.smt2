(set-option :print-success true)
(declare-fun f143 () Int)
(declare-fun f142 () Int)
(declare-fun f141 () Int)
(declare-fun f140 () Int)
(declare-fun f139 () Int)
(declare-fun f138 () Int)
(declare-fun f137 () Int)
(declare-fun f136 () Int)
(declare-fun f135 () Int)
(declare-fun f134 () Int)
(declare-fun f133 () Int)
(declare-fun f132 () Int)
(declare-fun f131 () Int)
(declare-fun f130 () Int)
(declare-fun f129 () Int)
(declare-fun f128 () Int)
(declare-fun f127 () Int)
(declare-fun f126 () Int)
(declare-fun f125 () Int)
(declare-fun f124 () Int)
(declare-fun f123 () Int)
(declare-fun f122 () Int)
(declare-fun f121 () Int)
(declare-fun f120 () Int)
(declare-fun f119 () Int)
(declare-fun f118 () Int)
(declare-fun f117 () Int)
(declare-fun f116 () Int)
(declare-fun f115 () Int)
(declare-fun f114 () Int)
(declare-fun f113 () Int)
(define-fun __node_init_DRAGON_0 ((DRAGON.usr.e01@0 Bool) (DRAGON.usr.e02@0 Bool) (DRAGON.usr.e03@0 Bool) (DRAGON.usr.e04@0 Bool) (DRAGON.usr.e05@0 Bool) (DRAGON.usr.e06@0 Bool) (DRAGON.usr.e07@0 Bool) (DRAGON.usr.e08@0 Bool) (DRAGON.usr.e09@0 Bool) (DRAGON.usr.e10@0 Bool) (DRAGON.usr.e11@0 Bool) (DRAGON.usr.e12@0 Bool) (DRAGON.usr.init_invalid@0 Int) (DRAGON.res.nondet_30 Int) (DRAGON.res.nondet_29 Int) (DRAGON.res.nondet_28 Int) (DRAGON.res.nondet_27 Int) (DRAGON.res.nondet_26 Int) (DRAGON.res.nondet_25 Int) (DRAGON.res.nondet_24 Int) (DRAGON.res.nondet_23 Int) (DRAGON.res.nondet_22 Int) (DRAGON.res.nondet_21 Int) (DRAGON.res.nondet_20 Int) (DRAGON.res.nondet_19 Int) (DRAGON.res.nondet_18 Int) (DRAGON.res.nondet_17 Int) (DRAGON.res.nondet_16 Int) (DRAGON.res.nondet_15 Int) (DRAGON.res.nondet_14 Int) (DRAGON.res.nondet_13 Int) (DRAGON.res.nondet_12 Int) (DRAGON.res.nondet_11 Int) (DRAGON.res.nondet_10 Int) (DRAGON.res.nondet_9 Int) (DRAGON.res.nondet_8 Int) (DRAGON.res.nondet_7 Int) (DRAGON.res.nondet_6 Int) (DRAGON.res.nondet_5 Int) (DRAGON.res.nondet_4 Int) (DRAGON.res.nondet_3 Int) (DRAGON.res.nondet_2 Int) (DRAGON.res.nondet_1 Int) (DRAGON.res.nondet_0 Int) (DRAGON.usr.exclusive@0 Int) (DRAGON.usr.shared@0 Int) (DRAGON.usr.shared_dirty@0 Int) (DRAGON.usr.dirty@0 Int) (DRAGON.usr.invalid@0 Int) (DRAGON.usr.erreur@0 Bool) (DRAGON.res.init_flag@0 Bool) (DRAGON.impl.usr.mem_init@0 Int)) Bool (let ((X1 false)) (let ((X2 false)) (let ((X3 false)) (let ((X4 false)) (let ((X5 false)) (let ((X6 false)) (let ((X7 false)) (let ((X8 false)) (let ((X9 false)) (let ((X10 false)) (let ((X11 false)) (let ((X12 false)) (and (= DRAGON.usr.exclusive@0 0) (= DRAGON.usr.shared@0 0) (= DRAGON.usr.shared_dirty@0 0) (= DRAGON.usr.dirty@0 0) (= DRAGON.impl.usr.mem_init@0 DRAGON.usr.init_invalid@0) (= DRAGON.usr.invalid@0 DRAGON.impl.usr.mem_init@0) (= false false) DRAGON.res.init_flag@0))))))))))))))
(define-fun __node_init_excludes12_0 ((excludes12.usr.X1@0 Bool) (excludes12.usr.X2@0 Bool) (excludes12.usr.X3@0 Bool) (excludes12.usr.X4@0 Bool) (excludes12.usr.X5@0 Bool) (excludes12.usr.X6@0 Bool) (excludes12.usr.X7@0 Bool) (excludes12.usr.X8@0 Bool) (excludes12.usr.X9@0 Bool) (excludes12.usr.X10@0 Bool) (excludes12.usr.X11@0 Bool) (excludes12.usr.X12@0 Bool) (excludes12.usr.excludes@0 Bool) (excludes12.res.init_flag@0 Bool)) Bool (and (= excludes12.usr.excludes@0 (or (or (or (or (or (or (or (or (or (or (or (or (and (and (and (and (and (and (and (and (and (and (and (not false) (not false)) (not false)) (not false)) (not false)) (not false)) (not false)) (not false)) (not false)) (not false)) (not false)) (not false)) false) false) false) false) false) false) false) false) false) false) false) false)) excludes12.res.init_flag@0))
(define-fun __node_init_First_0 ((First.usr.X@0 Int) (First.usr.First@0 Int) (First.res.init_flag@0 Bool)) Bool (and (= First.usr.First@0 First.usr.X@0) First.res.init_flag@0))
(define-fun __node_init_Sofar_0 ((Sofar.usr.X@0 Bool) (Sofar.usr.Sofar@0 Bool) (Sofar.res.init_flag@0 Bool)) Bool (and (= false false) Sofar.res.init_flag@0))
(declare-fun f102@0 () Bool)
(declare-fun f103@0 () Bool)
(declare-fun f104@0 () Int)
(declare-fun f90@0 () Bool)
(declare-fun f144@0 () Int)
(declare-fun f145@0 () Int)
(declare-fun f146@0 () Int)
(declare-fun f147@0 () Int)
(declare-fun f148@0 () Int)
(declare-fun f150@0 () Bool)
(declare-fun f151@0 () Bool)
(declare-fun f153@0 () Int)
(declare-fun f158@0 () Bool)
(declare-fun f157@0 () Int)
(declare-fun f156@0 () Bool)
(declare-fun f155@0 () Bool)
(declare-fun f154@0 () Bool)
(assert (let ((X1 false)) (let ((X2 f148@0)) (and (= f151@0 (and f150@0 (> f104@0 0))) (= false false) (__node_init_DRAGON_0 false false false false false false false false false false false false f104@0 f143 f142 f141 f140 f139 f138 f137 f136 f135 f134 f133 f132 f131 f130 f129 f128 f127 f126 f125 f124 f123 f122 f121 f120 f119 f118 f117 f116 f115 f114 f113 f144@0 f145@0 f146@0 f147@0 f148@0 false f158@0 f157@0) (__node_init_Sofar_0 f151@0 false f156@0) (__node_init_excludes12_0 false false false false false false false false false false false false f150@0 f155@0) (__node_init_First_0 f104@0 f153@0 f154@0) f90@0))))
(check-sat)
(declare-fun %fresh_actlit_2 () Bool)
(assert false)
(push 1)
(assert (! %fresh_actlit_2 :named c0))
(check-sat)

